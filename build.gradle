plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

repositories {
    mavenLocal()
}

group = maven_group
version = version
archives_base_name += "-mc${minecraft_version}"
if (build_number != "undefined") {
    version += "+build.${build_number}"
}

java {
    archivesBaseName = archives_base_name
    toolchain.languageVersion = JavaLanguageVersion.of(21)
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    implementation "net.neoforged:neoforge:${neo_version}"
    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}
//tasks.withType(ProcessResources).configureEach {
//    var replaceProperties = [
//            minecraft_version      : minecraft_version,
//            minecraft_version_range: minecraft_version_range,
//            neo_version            : neo_version,
//            neo_version_range      : neo_version_range,
//            loader_version_range   : loader_version_range,
//            mod_id                 : mod_id,
//            mod_name               : mod_name,
//            mod_license            : mod_license,
//            mod_version            : mod_version,
//            mod_authors            : mod_authors,
//            mod_description        : mod_description
//    ]
//    inputs.properties replaceProperties
//
//    filesMatching(['META-INF/neoforge.mods.toml']) {
//        expand replaceProperties
//    }
//}
// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "curtain",
                "Specification-Vendor"    : "Gugle",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Gugle",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.register('generateRulesReadme', JavaExec) {
    group = "documentation"
    description = "Generates a RULES.MD file for the rules directory"
    classpath sourceSets.main.runtimeClasspath
    main = "dev.dubhe.curtain.utils.CurtainRulesGenerator"
}
